name: CI/CD Purchase Service

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    outputs:
      ecr_repository_url: ${{ steps.ecr_output.outputs.ecr_repository_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="vpc_id=${{ secrets.VPC_ID }}" \
            -var="security_group_id=${{ secrets.SECURITY_GROUP_ID }}" \
            -var='subnet_ids=["subnet-057a322f484b9f962","subnet-09ee219f4838cb06f"]' \
            -var="target_group_arn=${{ secrets.TARGETGROUP }}" \
            -var="ecs_cluster_arn=arn:aws:ecs:us-east-1:148761677807:cluster/arka-ecs-cluster" \
            -var="container_image=will-be-overwritten" \
            -var="db_host=${{ secrets.DB_HOST }}" \
            -var="db_jdbc_url=${{ secrets.DB_JDBC_URL }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}"

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: |
          terraform apply -auto-approve \
            -var="vpc_id=${{ secrets.VPC_ID }}" \
            -var="security_group_id=${{ secrets.SECURITY_GROUP_ID }}" \
            -var='subnet_ids=["subnet-057a322f484b9f962","subnet-09ee219f4838cb06f"]' \
            -var="target_group_arn=${{ secrets.TARGETGROUP }}" \
            -var="ecs_cluster_arn=arn:aws:ecs:us-east-1:148761677807:cluster/arka-ecs-cluster" \
            -var="container_image=will-be-overwritten" \
            -var="db_host=${{ secrets.DB_HOST }}" \
            -var="db_jdbc_url=${{ secrets.DB_JDBC_URL }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}"

      - name: Get ECR Repository URL
        id: ecr_output
        run: |
          echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT

  build:
    needs: terraform
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ECR_REPOSITORY_URL: ${{ needs.terraform.outputs.ecr_repository_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: us-east-1

      - name: Build Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY_URL:${{ github.sha }} .

      - name: Push Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REPOSITORY_URL:${{ github.sha }}

      - name: Update ECS service with new image
        run: |
          aws ecs update-service \
            --cluster arka-ecs-cluster \
            --service purchase-service \
            --force-new-deployment \
            --region us-east-1
